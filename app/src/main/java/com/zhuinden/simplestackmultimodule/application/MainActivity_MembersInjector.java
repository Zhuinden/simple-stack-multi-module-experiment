// Generated by Dagger (https://dagger.dev).
package com.zhuinden.simplestackmultimodule.application;

import com.zhuinden.simplestackmoduleexample.navigation.core.BaseKey;
import com.zhuinden.simplestackmoduleexample.navigation.core.ViewFactory;

import java.util.Map;

import javax.inject.Provider;

import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<Map<Class<? extends BaseKey>, ViewFactory>> viewFactoriesProvider;

  private final Provider<ServiceProvider> serviceProvider;

  public MainActivity_MembersInjector(
      Provider<Map<Class<? extends BaseKey>, ViewFactory>> viewFactoriesProvider,
      Provider<ServiceProvider> serviceProvider) {
    this.viewFactoriesProvider = viewFactoriesProvider;
    this.serviceProvider = serviceProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<Map<Class<? extends BaseKey>, ViewFactory>> viewFactoriesProvider,
      Provider<ServiceProvider> serviceProvider) {
    return new MainActivity_MembersInjector(viewFactoriesProvider, serviceProvider);}

  @Override
  public void injectMembers(MainActivity instance) {
    injectViewFactories(instance, viewFactoriesProvider.get());
    injectServiceProvider(instance, serviceProvider.get());
  }

  @InjectedFieldSignature("com.zhuinden.simplestackmultimodule.application.MainActivity.viewFactories")
  public static void injectViewFactories(MainActivity instance,
      Map<Class<? extends BaseKey>, ViewFactory> viewFactories) {
    instance.viewFactories = viewFactories;
  }

  @InjectedFieldSignature("com.zhuinden.simplestackmultimodule.application.MainActivity.serviceProvider")
  public static void injectServiceProvider(MainActivity instance, ServiceProvider serviceProvider) {
    instance.serviceProvider = serviceProvider;
  }
}
