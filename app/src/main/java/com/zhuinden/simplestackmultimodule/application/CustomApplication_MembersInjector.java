// Generated by Dagger (https://dagger.dev).
package com.zhuinden.simplestackmultimodule.application;

import com.zhuinden.simplestackmoduleexample.common.ScopedService;
import com.zhuinden.simplestackmoduleexample.navigation.core.BaseKey;

import java.util.Map;
import java.util.Set;

import javax.inject.Provider;

import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CustomApplication_MembersInjector implements MembersInjector<CustomApplication> {
  private final Provider<Map<Class<? extends BaseKey>, Set<Class<? extends ScopedService>>>> keyMappingProvider;

  public CustomApplication_MembersInjector(
      Provider<Map<Class<? extends BaseKey>, Set<Class<? extends ScopedService>>>> keyMappingProvider) {
    this.keyMappingProvider = keyMappingProvider;
  }

  public static MembersInjector<CustomApplication> create(
      Provider<Map<Class<? extends BaseKey>, Set<Class<? extends ScopedService>>>> keyMappingProvider) {
    return new CustomApplication_MembersInjector(keyMappingProvider);}

  @Override
  public void injectMembers(CustomApplication instance) {
    injectKeyMapping(instance, keyMappingProvider.get());
  }

  @InjectedFieldSignature("com.zhuinden.simplestackmultimodule.application.CustomApplication.keyMapping")
  public static void injectKeyMapping(CustomApplication instance,
      Map<Class<? extends BaseKey>, Set<Class<? extends ScopedService>>> keyMapping) {
    instance.keyMapping = keyMapping;
  }
}
